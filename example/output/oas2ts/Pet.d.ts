import { Category } from './Category';
import { Tag } from './Tag';

/* eslint-disable */
/**
 * This file was automatically generated by openapi-transformer-toolkit CLI/methods.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI file,
 * and run openapi-transformer-toolkit CLI/methods to regenerate this file.
 */

export interface Pet {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: string[];
  tags?: Tag[];
  /**
   * pet status in the store
   */
  status?: 'available' | 'pending' | 'sold';
  /**
   * example nullable value
   *
   *
   * OpenAPI 3.0 uses `nullable
   *
   * ```yaml
   * type: string
   * nullable: true
   * ```
   *
   * OpenAPI 3.1 removes `nullable` in favor or multi-typing.
   *
   * ```yaml
   * type:
   * - string
   * - 'null'
   * ```
   *
   * OR
   *
   * ```yaml
   * oneOf:
   *   - type: string
   *   - type: null
   * ```
   *
   * Based on [this discussion](https://github.com/OAI/OpenAPI-Specification/issues/3148)
   * it seems either is valid. But `openapi-schema-to-json-schema` throws because it claims
   * type `["string","null"]` is not a valid type, even though that's exactly what it
   * generates for OpenAPI 3.0.x style. So, use `oneOf` to work around the issue.
   */
  nullableValue?: string | null;
  [k: string]: unknown;
}
